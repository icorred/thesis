package driver_micaz_osgi;
/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'dataPacketMsg'
 * message type.
 */

public class dataPacketMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new dataPacketMsg of size 20. */
    public dataPacketMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new dataPacketMsg of the given data_length. */
    public dataPacketMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataPacketMsg with the given data_length
     * and base offset.
     */
    public dataPacketMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataPacketMsg using the given byte array
     * as backing store.
     */
    public dataPacketMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataPacketMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public dataPacketMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataPacketMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public dataPacketMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataPacketMsg embedded in the given message
     * at the given base offset.
     */
    public dataPacketMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataPacketMsg embedded in the given message
     * at the given base offset and length.
     */
    public dataPacketMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <dataPacketMsg> \n";
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [destination=0x"+Long.toHexString(get_destination())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nextHop=0x"+Long.toHexString(get_nextHop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqNumber=0x"+Long.toHexString(get_seqNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [intermediateSource=0x"+Long.toHexString(get_intermediateSource())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path=0x"+Long.toHexString(get_path())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hopCount=0x"+Long.toHexString(get_hopCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [power_level=0x"+Long.toHexString(get_power_level())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [uniqueID=0x"+Long.toHexString(get_uniqueID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_data(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'source'
     */
    public int get_source() {
        return (int)getUIntBEElement(offsetBits_source(), 16);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(int value) {
        setUIntBEElement(offsetBits_source(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: destination
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'destination' is signed (false).
     */
    public static boolean isSigned_destination() {
        return false;
    }

    /**
     * Return whether the field 'destination' is an array (false).
     */
    public static boolean isArray_destination() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'destination'
     */
    public static int offset_destination() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'destination'
     */
    public static int offsetBits_destination() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'destination'
     */
    public int get_destination() {
        return (int)getUIntBEElement(offsetBits_destination(), 16);
    }

    /**
     * Set the value of the field 'destination'
     */
    public void set_destination(int value) {
        setUIntBEElement(offsetBits_destination(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'destination'
     */
    public static int size_destination() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'destination'
     */
    public static int sizeBits_destination() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nextHop
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nextHop' is signed (false).
     */
    public static boolean isSigned_nextHop() {
        return false;
    }

    /**
     * Return whether the field 'nextHop' is an array (false).
     */
    public static boolean isArray_nextHop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nextHop'
     */
    public static int offset_nextHop() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nextHop'
     */
    public static int offsetBits_nextHop() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'nextHop'
     */
    public int get_nextHop() {
        return (int)getUIntBEElement(offsetBits_nextHop(), 16);
    }

    /**
     * Set the value of the field 'nextHop'
     */
    public void set_nextHop(int value) {
        setUIntBEElement(offsetBits_nextHop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nextHop'
     */
    public static int size_nextHop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nextHop'
     */
    public static int sizeBits_nextHop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNumber
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNumber' is signed (false).
     */
    public static boolean isSigned_seqNumber() {
        return false;
    }

    /**
     * Return whether the field 'seqNumber' is an array (false).
     */
    public static boolean isArray_seqNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNumber'
     */
    public static int offset_seqNumber() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNumber'
     */
    public static int offsetBits_seqNumber() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'seqNumber'
     */
    public int get_seqNumber() {
        return (int)getUIntBEElement(offsetBits_seqNumber(), 16);
    }

    /**
     * Set the value of the field 'seqNumber'
     */
    public void set_seqNumber(int value) {
        setUIntBEElement(offsetBits_seqNumber(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNumber'
     */
    public static int size_seqNumber() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNumber'
     */
    public static int sizeBits_seqNumber() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: intermediateSource
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'intermediateSource' is signed (false).
     */
    public static boolean isSigned_intermediateSource() {
        return false;
    }

    /**
     * Return whether the field 'intermediateSource' is an array (false).
     */
    public static boolean isArray_intermediateSource() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'intermediateSource'
     */
    public static int offset_intermediateSource() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'intermediateSource'
     */
    public static int offsetBits_intermediateSource() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'intermediateSource'
     */
    public int get_intermediateSource() {
        return (int)getUIntBEElement(offsetBits_intermediateSource(), 16);
    }

    /**
     * Set the value of the field 'intermediateSource'
     */
    public void set_intermediateSource(int value) {
        setUIntBEElement(offsetBits_intermediateSource(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'intermediateSource'
     */
    public static int size_intermediateSource() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'intermediateSource'
     */
    public static int sizeBits_intermediateSource() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path' is signed (false).
     */
    public static boolean isSigned_path() {
        return false;
    }

    /**
     * Return whether the field 'path' is an array (false).
     */
    public static boolean isArray_path() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path'
     */
    public static int offset_path() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path'
     */
    public static int offsetBits_path() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'path'
     */
    public int get_path() {
        return (int)getUIntBEElement(offsetBits_path(), 16);
    }

    /**
     * Set the value of the field 'path'
     */
    public void set_path(int value) {
        setUIntBEElement(offsetBits_path(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path'
     */
    public static int size_path() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path'
     */
    public static int sizeBits_path() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hopCount
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hopCount' is signed (false).
     */
    public static boolean isSigned_hopCount() {
        return false;
    }

    /**
     * Return whether the field 'hopCount' is an array (false).
     */
    public static boolean isArray_hopCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hopCount'
     */
    public static int offset_hopCount() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hopCount'
     */
    public static int offsetBits_hopCount() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'hopCount'
     */
    public int get_hopCount() {
        return (int)getUIntBEElement(offsetBits_hopCount(), 16);
    }

    /**
     * Set the value of the field 'hopCount'
     */
    public void set_hopCount(int value) {
        setUIntBEElement(offsetBits_hopCount(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hopCount'
     */
    public static int size_hopCount() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hopCount'
     */
    public static int sizeBits_hopCount() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: power_level
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'power_level' is signed (false).
     */
    public static boolean isSigned_power_level() {
        return false;
    }

    /**
     * Return whether the field 'power_level' is an array (false).
     */
    public static boolean isArray_power_level() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'power_level'
     */
    public static int offset_power_level() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'power_level'
     */
    public static int offsetBits_power_level() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'power_level'
     */
    public int get_power_level() {
        return (int)getUIntBEElement(offsetBits_power_level(), 16);
    }

    /**
     * Set the value of the field 'power_level'
     */
    public void set_power_level(int value) {
        setUIntBEElement(offsetBits_power_level(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'power_level'
     */
    public static int size_power_level() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'power_level'
     */
    public static int sizeBits_power_level() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: uniqueID
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'uniqueID' is signed (false).
     */
    public static boolean isSigned_uniqueID() {
        return false;
    }

    /**
     * Return whether the field 'uniqueID' is an array (false).
     */
    public static boolean isArray_uniqueID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'uniqueID'
     */
    public static int offset_uniqueID() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'uniqueID'
     */
    public static int offsetBits_uniqueID() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'uniqueID'
     */
    public int get_uniqueID() {
        return (int)getUIntBEElement(offsetBits_uniqueID(), 16);
    }

    /**
     * Set the value of the field 'uniqueID'
     */
    public void set_uniqueID(int value) {
        setUIntBEElement(offsetBits_uniqueID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'uniqueID'
     */
    public static int size_uniqueID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'uniqueID'
     */
    public static int sizeBits_uniqueID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: int[], unsigned
    //   Offset (bits): 144
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (true).
     */
    public static boolean isArray_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'data' as a int[]
     */
    public int[] get_data() {
        int[] tmp = new int[1];
        for (int index0 = 0; index0 < numElements_data(0); index0++) {
            tmp[index0] = getElement_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data' from the given int[]
     */
    public void set_data(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'data'
     */
    public int getElement_data(int index1) {
        return (int)getUIntBEElement(offsetBits_data(index1), 16);
    }

    /**
     * Set an element of the array 'data'
     */
    public void setElement_data(int index1, int value) {
        setUIntBEElement(offsetBits_data(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data'
     */
    public static int totalSize_data() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data'
     */
    public static int totalSizeBits_data() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data'
     */
    public static int elementSize_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data'
     */
    public static int elementSizeBits_data() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'data'
     */
    public static int numDimensions_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data'
     */
    public static int numElements_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data'
     * for the given dimension.
     */
    public static int numElements_data(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
