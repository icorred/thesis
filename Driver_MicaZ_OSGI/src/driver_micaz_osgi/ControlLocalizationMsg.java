/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ControlLocalizationMsg'
 * message type.
 */
package driver_micaz_osgi;

public class ControlLocalizationMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new ControlLocalizationMsg of size 14. */
    public ControlLocalizationMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ControlLocalizationMsg of the given data_length. */
    public ControlLocalizationMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ControlLocalizationMsg with the given data_length
     * and base offset.
     */
    public ControlLocalizationMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ControlLocalizationMsg using the given byte array
     * as backing store.
     */
    public ControlLocalizationMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ControlLocalizationMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ControlLocalizationMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ControlLocalizationMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ControlLocalizationMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ControlLocalizationMsg embedded in the given message
     * at the given base offset.
     */
    public ControlLocalizationMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ControlLocalizationMsg embedded in the given message
     * at the given base offset and length.
     */
    public ControlLocalizationMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ControlLocalizationMsg> \n";
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [destination=0x"+Long.toHexString(get_destination())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [power_value=0x"+Long.toHexString(get_power_value())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqNumber=0x"+Long.toHexString(get_seqNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [intermediateSource=0x"+Long.toHexString(get_intermediateSource())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hopCount=0x"+Long.toHexString(get_hopCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [action=0x"+Long.toHexString(get_action())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'source'
     */
    public int get_source() {
        return (int)getUIntBEElement(offsetBits_source(), 16);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(int value) {
        setUIntBEElement(offsetBits_source(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: destination
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'destination' is signed (false).
     */
    public static boolean isSigned_destination() {
        return false;
    }

    /**
     * Return whether the field 'destination' is an array (false).
     */
    public static boolean isArray_destination() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'destination'
     */
    public static int offset_destination() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'destination'
     */
    public static int offsetBits_destination() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'destination'
     */
    public int get_destination() {
        return (int)getUIntBEElement(offsetBits_destination(), 16);
    }

    /**
     * Set the value of the field 'destination'
     */
    public void set_destination(int value) {
        setUIntBEElement(offsetBits_destination(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'destination'
     */
    public static int size_destination() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'destination'
     */
    public static int sizeBits_destination() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: power_value
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'power_value' is signed (false).
     */
    public static boolean isSigned_power_value() {
        return false;
    }

    /**
     * Return whether the field 'power_value' is an array (false).
     */
    public static boolean isArray_power_value() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'power_value'
     */
    public static int offset_power_value() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'power_value'
     */
    public static int offsetBits_power_value() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'power_value'
     */
    public int get_power_value() {
        return (int)getUIntBEElement(offsetBits_power_value(), 16);
    }

    /**
     * Set the value of the field 'power_value'
     */
    public void set_power_value(int value) {
        setUIntBEElement(offsetBits_power_value(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'power_value'
     */
    public static int size_power_value() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'power_value'
     */
    public static int sizeBits_power_value() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNumber
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNumber' is signed (false).
     */
    public static boolean isSigned_seqNumber() {
        return false;
    }

    /**
     * Return whether the field 'seqNumber' is an array (false).
     */
    public static boolean isArray_seqNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNumber'
     */
    public static int offset_seqNumber() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNumber'
     */
    public static int offsetBits_seqNumber() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'seqNumber'
     */
    public int get_seqNumber() {
        return (int)getUIntBEElement(offsetBits_seqNumber(), 16);
    }

    /**
     * Set the value of the field 'seqNumber'
     */
    public void set_seqNumber(int value) {
        setUIntBEElement(offsetBits_seqNumber(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNumber'
     */
    public static int size_seqNumber() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNumber'
     */
    public static int sizeBits_seqNumber() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: intermediateSource
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'intermediateSource' is signed (false).
     */
    public static boolean isSigned_intermediateSource() {
        return false;
    }

    /**
     * Return whether the field 'intermediateSource' is an array (false).
     */
    public static boolean isArray_intermediateSource() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'intermediateSource'
     */
    public static int offset_intermediateSource() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'intermediateSource'
     */
    public static int offsetBits_intermediateSource() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'intermediateSource'
     */
    public int get_intermediateSource() {
        return (int)getUIntBEElement(offsetBits_intermediateSource(), 16);
    }

    /**
     * Set the value of the field 'intermediateSource'
     */
    public void set_intermediateSource(int value) {
        setUIntBEElement(offsetBits_intermediateSource(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'intermediateSource'
     */
    public static int size_intermediateSource() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'intermediateSource'
     */
    public static int sizeBits_intermediateSource() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hopCount
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hopCount' is signed (false).
     */
    public static boolean isSigned_hopCount() {
        return false;
    }

    /**
     * Return whether the field 'hopCount' is an array (false).
     */
    public static boolean isArray_hopCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hopCount'
     */
    public static int offset_hopCount() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hopCount'
     */
    public static int offsetBits_hopCount() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'hopCount'
     */
    public int get_hopCount() {
        return (int)getUIntBEElement(offsetBits_hopCount(), 16);
    }

    /**
     * Set the value of the field 'hopCount'
     */
    public void set_hopCount(int value) {
        setUIntBEElement(offsetBits_hopCount(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hopCount'
     */
    public static int size_hopCount() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hopCount'
     */
    public static int sizeBits_hopCount() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: action
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'action' is signed (false).
     */
    public static boolean isSigned_action() {
        return false;
    }

    /**
     * Return whether the field 'action' is an array (false).
     */
    public static boolean isArray_action() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'action'
     */
    public static int offset_action() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'action'
     */
    public static int offsetBits_action() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'action'
     */
    public int get_action() {
        return (int)getUIntBEElement(offsetBits_action(), 16);
    }

    /**
     * Set the value of the field 'action'
     */
    public void set_action(int value) {
        setUIntBEElement(offsetBits_action(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'action'
     */
    public static int size_action() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'action'
     */
    public static int sizeBits_action() {
        return 16;
    }

}
