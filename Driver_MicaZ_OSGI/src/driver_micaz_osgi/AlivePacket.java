/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'alivePacket'
 * message type.
 */
package driver_micaz_osgi;

public class AlivePacket extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 9;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 10;

    /** Create a new alivePacket of size 9. */
    public AlivePacket() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new alivePacket of the given data_length. */
    public AlivePacket(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new alivePacket with the given data_length
     * and base offset.
     */
    public AlivePacket(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new alivePacket using the given byte array
     * as backing store.
     */
    public AlivePacket(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new alivePacket using the given byte array
     * as backing store, with the given base offset.
     */
    public AlivePacket(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new alivePacket using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AlivePacket(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new alivePacket embedded in the given message
     * at the given base offset.
     */
    public AlivePacket(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new alivePacket embedded in the given message
     * at the given base offset and length.
     */
    public AlivePacket(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <alivePacket> \n";
      try {
        s += "  [seqNo=0x"+Long.toHexString(get_seqNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [single_hop_src=0x"+Long.toHexString(get_single_hop_src())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [code=0x"+Long.toHexString(get_code())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [battery=0x"+Long.toHexString(get_battery())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNo
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNo' is signed (false).
     */
    public static boolean isSigned_seqNo() {
        return false;
    }

    /**
     * Return whether the field 'seqNo' is an array (false).
     */
    public static boolean isArray_seqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNo'
     */
    public static int offset_seqNo() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNo'
     */
    public static int offsetBits_seqNo() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'seqNo'
     */
    public int get_seqNo() {
        return (int)getUIntBEElement(offsetBits_seqNo(), 16);
    }

    /**
     * Set the value of the field 'seqNo'
     */
    public void set_seqNo(int value) {
        setUIntBEElement(offsetBits_seqNo(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNo'
     */
    public static int size_seqNo() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNo'
     */
    public static int sizeBits_seqNo() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: single_hop_src
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'single_hop_src' is signed (false).
     */
    public static boolean isSigned_single_hop_src() {
        return false;
    }

    /**
     * Return whether the field 'single_hop_src' is an array (false).
     */
    public static boolean isArray_single_hop_src() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'single_hop_src'
     */
    public static int offset_single_hop_src() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'single_hop_src'
     */
    public static int offsetBits_single_hop_src() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'single_hop_src'
     */
    public int get_single_hop_src() {
        return (int)getUIntBEElement(offsetBits_single_hop_src(), 16);
    }

    /**
     * Set the value of the field 'single_hop_src'
     */
    public void set_single_hop_src(int value) {
        setUIntBEElement(offsetBits_single_hop_src(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'single_hop_src'
     */
    public static int size_single_hop_src() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'single_hop_src'
     */
    public static int sizeBits_single_hop_src() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: code
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'code' is signed (false).
     */
    public static boolean isSigned_code() {
        return false;
    }

    /**
     * Return whether the field 'code' is an array (false).
     */
    public static boolean isArray_code() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'code'
     */
    public static int offset_code() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'code'
     */
    public static int offsetBits_code() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'code'
     */
    public short get_code() {
        return (short)getUIntBEElement(offsetBits_code(), 8);
    }

    /**
     * Set the value of the field 'code'
     */
    public void set_code(short value) {
        setUIntBEElement(offsetBits_code(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'code'
     */
    public static int size_code() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'code'
     */
    public static int sizeBits_code() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: battery
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'battery' is signed (false).
     */
    public static boolean isSigned_battery() {
        return false;
    }

    /**
     * Return whether the field 'battery' is an array (false).
     */
    public static boolean isArray_battery() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'battery'
     */
    public static int offset_battery() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'battery'
     */
    public static int offsetBits_battery() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'battery'
     */
    public int get_battery() {
        return (int)getUIntBEElement(offsetBits_battery(), 16);
    }

    /**
     * Set the value of the field 'battery'
     */
    public void set_battery(int value) {
        setUIntBEElement(offsetBits_battery(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'battery'
     */
    public static int size_battery() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'battery'
     */
    public static int sizeBits_battery() {
        return 16;
    }

}